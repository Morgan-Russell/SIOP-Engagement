Fit1.1<-lavaan::cfa(Sub_Model, data = CFAdata)
semPlot::semPaths(Fit1.1, "std")
fit1.1 <- as.data.frame(fitMeasures(Fit1.1))
summary(Fit1.1, fit.measure=TRUE)
write.csv(fit1.1, "temp.csv")
## Looking at scale correlations because of very large latent covariances
testing <- CFAdata
testing$absorp <- rowMeans(testing[1:12], na.rm=TRUE)
testing$vigor <- rowMeans(testing[13:24], na.rm=TRUE)
testing$dedic <- rowMeans(testing[25:36], na.rm=TRUE)
cor(testing[37:39], use="complete.obs")
## plot(testing$absorp, testing$dedic)
Att_Model<-'
Cognitive=~Item_1+Item_2+Item_3+Item_4+Item_13+Item_14+Item_15+Item_16+Item_25+Item_26+Item_27+Item_28
Affective=~Item_5+Item_6+Item_7+Item_8+Item_17+Item_18+Item_19+Item_20+Item_29+Item_30+Item_31+Item_32
Behavioral=~Item_9+Item_10+Item_11+Item_12+Item_21+Item_22+Item_23+Item_24+Item_33+Item_34+Item_35+Item_36
'
Fit1.2<-lavaan::cfa(Att_Model, data = CFAdata)
semPlot::semPaths(Fit1.2,"std")
lavaan::fitMeasures(Fit1.2)
summary(Fit1.2, fit.measure=TRUE)
## Bifactor below (5/19/21):
Bifactor_Model<-'
Cognitive=~Item_1+Item_2+Item_3+Item_4+Item_13+Item_14+Item_15+Item_16+Item_25+Item_26+Item_27+Item_28
Affective=~Item_5+Item_6+Item_7+Item_8+Item_17+Item_18+Item_19+Item_20+Item_29+Item_30+Item_31+Item_32
Behavioral=~Item_9+Item_10+Item_11+Item_12+Item_21+Item_22+Item_23+Item_24+Item_33+Item_34+Item_35+Item_36
Absorption=~Item_1+Item_2+Item_3+Item_4+Item_5+Item_6+Item_7+Item_8+Item_9+Item_10+Item_11+Item_12
Vigor=~Item_13+Item_14+Item_15+Item_16+Item_17+Item_18+Item_19+Item_20+Item_21+Item_22+Item_23+Item_24
Dedication=~Item_25+Item_26+Item_27+Item_28+Item_29+Item_30+Item_31+Item_32+Item_33+Item_34+Item_35+Item_36
Absorption ~~ 0*Affective
Absorption ~~ 0*Behavioral
Absorption ~~ 0*Cognitive
Vigor ~~ 0*Affective
Vigor ~~ 0*Behavioral
Vigor ~~ 0*Cognitive
Dedication ~~ 0*Affective
Dedication ~~ 0*Behavioral
Dedication ~~ 0*Cognitive
'
#Cognitive ~~ Affective
#Cognitive ~~ Behavioral
#Affective ~~ Behavioral
#Absorption ~~ Vigor
#Absorption ~~ Dedication
#Vigor ~~ Dedication'
Fit.Bi <- lavaan::cfa(Bifactor_Model, data = CFAdata) #, likelihood = "wishart")
semPlot::semPaths(Fit.Bi, bifactor = c("Cognitive", "Affective", "Behavioral"), "std", layout = "tree3",
rotation = 2, curvePivot=TRUE, style="lisrel", nCharNodes = 0)  ## exoCov=FALSE deletes all covariances
title("Initial pilot bifactor analysis (36 candidate items)")
modindices(Fit.Bi, sort = TRUE, maximum.number = 5)
summary(Fit.Bi)
## trying SEM package
library(sem)
CFA_att <- specifyModel(text = "
Cognitive -> Item_1, lam1, 1
Cognitive -> Item_2, lam2, NA
Cognitive -> Item_3, lam3, NA
Cognitive -> Item_4, lam4, NA
Cognitive -> Item_13, lam5, NA
Cognitive -> Item_14, lam6, NA
Cognitive -> Item_15, lam7, NA
Cognitive -> Item_16, lam8, NA
Cognitive -> Item_25, lam9, NA
Cognitive -> Item_26, lam10, NA
Cognitive -> Item_27, lam11, NA
Cognitive -> Item_28, lam12, NA
Affective -> Item_5, lam13, 1
Affective -> Item_6, lam14, NA
Affective -> Item_7, lam15, NA
Affective -> Item_8, lam16, NA
Affective -> Item_17, lam17, NA
Affective -> Item_18, lam18, NA
Affective -> Item_19, lam19, NA
Affective -> Item_20, lam20, NA
Affective -> Item_29, lam21, NA
Affective -> Item_30, lam22, NA
Affective -> Item_31, lam23, NA
Affective -> Item_32, lam24, NA
Behavioral -> Item_9, lam25, 1
Behavioral -> Item_10, lam26, NA
Behavioral -> Item_11, lam27, NA
Behavioral -> Item_12, lam28, NA
Behavioral -> Item_21, lam29, NA
Behavioral -> Item_22, lam30, NA
Behavioral -> Item_23, lam31, NA
Behavioral -> Item_24, lam32, NA
Behavioral -> Item_33, lam33, NA
Behavioral -> Item_34, lam34, NA
Behavioral -> Item_35, lam35, NA
Behavioral -> Item_36, lam36, NA
Affective <-> Affective, var1, NA
Cognitive <-> Cognitive, var2, NA
Behavioral <-> Behavioral, var3, NA
Cognitive <-> Affective, cov1, NA
Cognitive <-> Behavioral, cov2, NA
Affective <-> Behavioral, cov3, NA
")
cor <- cor(CFAdata, use="complete.obs")
cov <- cov(CFAdata, use="complete.obs")
att.sum <- sem(CFA_att, cov, 282)
summary(att.sum)
pathDiagram(att.sum)
CFA_att <- specifyModel(text = "
Item_1 -> Cognitive, lam1, 1
Item_2 -> Cognitive, lam2, NA
Item_3 -> Cognitive, lam3, NA
Item_4 -> Cognitive, lam4, NA
Item_13 -> Cognitive, lam5, NA
Item_14 -> Cognitive, lam6, NA
Item_15 -> Cognitive, lam7, NA
Item_16 -> Cognitive, lam8, NA
Item_25 -> Cognitive, lam9, NA
Item_26 -> Cognitive, lam10, NA
Item_27 -> Cognitive, lam11, NA
Item_28 -> Cognitive, lam12, NA
Item_5 -> Affective, lam13, 1
Item_6 -> Affective, lam14, NA
Item_7 -> Affective, lam15, NA
Item_8 -> Affective, lam16, NA
Item_17 -> Affective, lam17, NA
Item_18 -> Affective, lam18, NA
Item_19 -> Affective, lam19, NA
Item_20 -> Affective, lam20, NA
Item_29 -> Affective, lam21, NA
Item_30 -> Affective, lam22, NA
Item_31 -> Affective, lam23, NA
Item_32 -> Affective, lam24, NA
Item_9 -> Behavioral, lam25, 1
Item_10 -> Behavioral, lam26, NA
Item_11 -> Behavioral, lam27, NA
Item_12 -> Behavioral, lam28, NA
Item_21 -> Behavioral, lam29, NA
Item_22 -> Behavioral, lam30, NA
Item_23 -> Behavioral, lam31, NA
Item_24 -> Behavioral, lam32, NA
Item_33 -> Behavioral, lam33, NA
Item_34 -> Behavioral, lam34, NA
Item_35 -> Behavioral, lam35, NA
Item_36 -> Behavioral, lam36, NA
Affective <-> Affective, var1, NA
Cognitive <-> Cognitive, var2, NA
Behavioral <-> Behavioral, var3, NA
Cognitive <-> Affective, cov1, NA
Cognitive <-> Behavioral, cov2, NA
Affective <-> Behavioral, cov3, NA
")
Bifactor_Model<-'
Cognitive=~Item_1+Item_2+Item_3+Item_4+Item_13+Item_14+Item_15+Item_16+Item_25+Item_26+Item_27+Item_28
Affective=~Item_5+Item_6+Item_7+Item_8+Item_17+Item_18+Item_19+Item_20+Item_29+Item_30+Item_31+Item_32
Behavioral=~Item_9+Item_10+Item_11+Item_12+Item_21+Item_22+Item_23+Item_24+Item_33+Item_34+Item_35+Item_36
Absorption=~Item_1+Item_2+Item_3+Item_4+Item_5+Item_6+Item_7+Item_8+Item_9+Item_10+Item_11+Item_12
Vigor=~Item_13+Item_14+Item_15+Item_16+Item_17+Item_18+Item_19+Item_20+Item_21+Item_22+Item_23+Item_24
Dedication=~Item_25+Item_26+Item_27+Item_28+Item_29+Item_30+Item_31+Item_32+Item_33+Item_34+Item_35+Item_36
Absorption ~~ 0*Affective
Absorption ~~ 0*Behavioral
Absorption ~~ 0*Cognitive
Vigor ~~ 0*Affective
Vigor ~~ 0*Behavioral
Vigor ~~ 0*Cognitive
Dedication ~~ 0*Affective
Dedication ~~ 0*Behavioral
Dedication ~~ 0*Cognitive
'
Fit.Bi <- lavaan::cfa(Bifactor_Model, data = CFAdata) #, likelihood = "wishart")
title("Initial pilot bifactor analysis (36 candidate items)")
semPlot::semPaths(Fit.Bi, bifactor = c("Cognitive", "Affective", "Behavioral"), "std", layout = "tree3",
rotation = 2, curvePivot=TRUE, style="lisrel", nCharNodes = 0)  ## exoCov=FALSE deletes all covariances
modindices(Fit.Bi, sort = TRUE, maximum.number = 5)
Fit.Bi <- lavaan::cfa(Bifactor_Model, data = CFAdata) #, likelihood = "wishart")
modindices(Fit.Bi, sort = TRUE, maximum.number = 5)
Fit.Bi <- lavaan::cfa(Bifactor_Model, data = CFAdata) #, likelihood = "wishart")
Fit.Bi
View(Fit.Bi)
Fit.Bi <- lavaan::cfa(Bifactor_Model, data = CFAdata, likelihood = "wishart")
modindices(Fit.Bi, sort = TRUE, maximum.number = 5)
# Packages
library(tidyverse)
library(DT)
# Hours worked
unique(together$`How many hours do you typically work per week in this job?`) # Sixty-two unique responses
gsub("[^0-9.-]", "", together$`How many hours do you typically work per week in this job?`)
together$`How many hours do you typically work per week in this job?`
together$`How many hours do you typically work per week in this job?` <- together$`How many hours do you typically work per week in this job?` %>%
gsub("[^0-9./-]", "", .) %>%  # removes all characters not included in brackets
gsub(".*/", "", .) %>% # Selects second number after "/" (e.g. 40/50 -> 50)
gsub(".*-", "", .) %>%  # Selects second number after "-" (e.g. 50-60 -> 60)
gsub("[^0-9]", "", .) %>% # Removes
str_sub(1,2) %>% # Subsets all responses to first two indices. Quick and easy way to rule out impossible hour entries
as.numeric()
#Job title
unique(together$`What is the title of the job you were thinking about while responding to this survey?`) # Two-hundred and thirty-seven unique responses
together$`What is the title of the job you were thinking about while responding to this survey?`
#ONET job clusters, for use as factor levels
onet <- c('Agriculture, Food & Natural Resources', 'Archtecture & Construction', 'Arts, Audio/Video Technology & Communications',
'Business Management & Administration', 'Education & Training', 'Finance', 'Government & Public Administration',
'Health Science', 'Hospitality & Tourism', 'Human Services', 'Information Technology', 'Law, Public Safety, Corrections & Security',
'Manufacturing', 'Marketing', 'Science, Technology, Engineering & Mathematics', 'Transportation, Distribution & Logistics')
?dt
?DT
??datatable
?datatable()
datatable(mtcars)
glimpse(together)
ncol(together)
demo_table <- datatable(together[38:41])
demo_table
demo_table
demo_table
hist(together$`How many hours do you typically work per week in this job?`)
Fit.Bi <- lavaan::cfa(Bifactor_Model, data = CFAdata) #, likelihood = "wishart")
semPlot::semPaths(Fit.Bi, bifactor = c("Cognitive", "Affective", "Behavioral"), "std", layout = "tree3",
rotation = 2, curvePivot=TRUE, style="lisrel", nCharNodes = 0)  ## exoCov=FALSE deletes all covariances
title("Initial pilot bifactor analysis (36 candidate items)")
modindices(Fit.Bi, sort = TRUE, maximum.number = 5)
summary(Fit.Bi)
?str_sub
??datatable
library(tidyverse)
# Packages
library(tidyverse)
library(DT)
# Morgan factorizes the "What is the title of the job you were thinking about while responding to this survey?" column
# As well as the "How many hours do you typically work per week in this job?" column
# An object lesson in why you should NEVER HAVE FREE TEXT ENTRY IN YOUR SURVEY
# Packages
library(tidyverse)
library(DT)
temp <- read.csv("qualtrics_pilot_data.csv", header=FALSE, na.strings="")
x <- temp[2,]
data <- temp[-c(1:3),]
colnames(data) <- x
num <- nrow(data)
## getting conditions into one large file below - 12/9/20
data$Cond1 <- rowSums(is.na(data[18:53]))
data$Cond2 <- rowSums(is.na(data[54:89]))
data$Cond3 <- rowSums(is.na(data[90:125]))
data$Cond4 <- rowSums(is.na(data[126:161]))
data$Condition[data$Cond1 < 36] <- 1
data$Condition[data$Cond2 < 36] <- 2
data$Condition[data$Cond3 < 36] <- 3
data$Condition[data$Cond4 < 36] <- 4
cond1 <- data[ which(data$Condition==1), ]
cond2 <- data[ which(data$Condition==2), ]
cond3 <- data[ which(data$Condition==3), ]
cond4 <- data[ which(data$Condition==4), ]
cond1.red <- cond1[,c(6, 18:53, 162:165, 171)]  ## using Cond1 ordering
cond2.red <- cond2[,c(6, 62:65, 70:73, 82:85, 58:61, 74:77, 86:89, 66:69, 78:81, 54:57, 162:165, 171)]
cond3.red <- cond3[,c(6, 94:97, 106:109, 118:121, 98:101, 110:113, 122:125, 102:105, 114:117, 90:93, 162:165, 171)]
cond4.red <- cond4[,c(6, 138:161, 130:137, 126:129, 162:165, 171)]        ## 171 versus 172 because testing script has extra "hours" variable
names(cond1.red) = gsub(pattern = "C*.* - ", replacement = "", x = names(cond1.red))      ## Getting rid of condition markers so rbind will work
names(cond2.red) = gsub(pattern = "C*.* - ", replacement = "", x = names(cond2.red))
names(cond3.red) = gsub(pattern = "C*.* - ", replacement = "", x = names(cond3.red))
names(cond4.red) = gsub(pattern = "C*.* - ", replacement = "", x = names(cond4.red))
together <- rbind(cond1.red, cond2.red, cond3.red, cond4.red)        ## we'll be using this object for analyses
# Hours worked
unique(together$`How many hours do you typically work per week in this job?`) # Sixty-two unique responses
gsub("[^0-9.-]", "", together$`How many hours do you typically work per week in this job?`)
together$`How many hours do you typically work per week in this job?`
together$`How many hours do you typically work per week in this job?` <- together$`How many hours do you typically work per week in this job?` %>%
gsub("[^0-9./-]", "", .) %>%  # removes all characters not included in brackets
gsub(".*/", "", .) %>% # Selects second number after "/" (e.g. 40/50 -> 50)
gsub(".*-", "", .) %>%  # Selects second number after "-" (e.g. 50-60 -> 60)
gsub("[^0-9]", "", .) %>% # Removes
str_sub(1,2) %>% # Subsets all responses to first two indices. Quick and easy way to rule out impossible hour entries
as.numeric()
#Job title
unique(together$`What is the title of the job you were thinking about while responding to this survey?`) # Two-hundred and thirty-seven unique responses
together$`What is the title of the job you were thinking about while responding to this survey?`
#ONET job clusters, for use as factor levels
onet <- c('Agriculture, Food & Natural Resources', 'Archtecture & Construction', 'Arts, Audio/Video Technology & Communications',
'Business Management & Administration', 'Education & Training', 'Finance', 'Government & Public Administration',
'Health Science', 'Hospitality & Tourism', 'Human Services', 'Information Technology', 'Law, Public Safety, Corrections & Security',
'Manufacturing', 'Marketing', 'Science, Technology, Engineering & Mathematics', 'Transportation, Distribution & Logistics')
together$`What is the title of the job you were thinking about while responding to this survey?` %>%
tolower() %>%
trimws()
demo_table <- datatable(together[38:40])
# To do:
# Find quick and easy classification
# include as appendix in SIOPpapaja
# make as searchable table inside tech report via "DT" package
#     May only work inside HTML version
# include other demo data (e.g. hours worked)
# Down the line:
# management/non management
demo_table
demo_table$jsHooks
demo_table$width
demo_table$elementId
demo_table[1,2]
demo_table[1]
demo_table[2]
demo_table[3]
nrow(together[38:40])
nrow(together[38:40]) %>% filter(is.na(together[38:40]))
is.na(NA)
is.na('abc')
a <- (NA, "A", "B")
a <- c(NA, "A", "B")
is.na(a)
sum(is.na(a))
a <- c(NA, NA, "B")
sum(is.na(a))
iris
cars
cars %>%
rowsums()
cars %>%
rowSums()
t <- data.frame(a)
t
a <- c(NA, NA, "2")
is.na(a)
sum(a)
a <- c(NA, NA, 2)
sum(a)
sum(a, na.rm = TRUE)
sum(is.na(a))
a <- c(NA, NA, 3)
sum(is.na(a))
t <- t %>%
a
t <- t %>% t(t)
t <- t %>% t()
t
t <- t %>% rbind(c(10, NA, "A"))
t
t %>% filter(t[1] == NA)
t %>% filter(is.na(.))
together[38:40] %>% rowSums(is.na())
together[38:40] %>% rowSums(is.na(.))
together[38:40] %>% rowSums(is.na(.), na.rm = TRUE)
together[38:40] %>% rowSums()
head(together[38:40])
head(together[38:40],30)
demo_table <- together[38:40] %>%
filter(-is.na(`How many hours do you typically work per week in this job?`))
t
rowSums(is.na(t))
t %>% filter(rowSums(is.na(.) == 1))
t %>% filter(rowSums(is.na() == 1))
t %>% filter_all(any_vars(!is.na(.)))
demo_table <- together[38:40] %>%
filter_all(any_vars(!is.na(.)))
demo_table
nrow(demo_table)
nrow(together[38:40])
demo_table <- together[38:40] %>%
filter_all(any_vars(!is.na(.))) %>%
datatable()
demo_table
head(together[40])
together$tenure <- together[40]
together$tenure <- together[40] %>%
temp <- head(together[40])
together$tenure <- together[40] %>%
temp <- head(together[40])
temp <- head(together[40])
hold <- head(together[40])
hold
?gsub
?str_detect
hold %>% str_detect(., "month")
hold %>% str_detect(., "abc")
hold %>% str_detect(., "year")
?str_which
hold %>% str_which(., "year")
hold %>% str_which(., "month")
hold
length(hold)
hold[1]
rownames(hold) <- NA
rownames(hold) <- NULL
hold
hold %>% str_which(., "month")
hold %>% str_detect(., "month")
hold %>% str_which(., "lalalal")
hold %>% str_count(., "month")
class(hold)
hold <- head(together[40]) %>% #test data for playing with temp
vector()
hold <- head(together[40]) %>% #test data for playing with temp
list()
hold
hold <- head(together[40]) #%>% #test data for playing with temp
hold
hold <- head(together[40]) %>%  #%>% #test data for playing with temp
list()
hold %>% str_count(., "month")
hold %>% str_which(., "month")
fruit
typeof(fruit)
typeof(hold)
hold <- head(together[40]) %>%  #%>% #test data for playing with temp
character()
class(fruit)
str_detect(fruit, "a")
hold <- head(together[40]) %>%  #%>% #test data for playing with temp
character()
?character
hold <- head(together[40]) %>%  #%>% #test data for playing with temp
character(length = length(together[40]))
hold <- head(together[40]) %>%  #%>% #test data for playing with temp
as.character()
class(hold)
temp %>% str_which("month")
typeof(hold)
hold
hold <- head(together[40]) %>%  #%>% #test data for playing with temp
as.vector %>%
as.character()
hold
hold
hold <- head(together[40]) %>%  #%>% #test data for playing with temp
as.vector
hold
temp %>% str_which("month")
hold
temp
length(hold)
length(temp)
nrow(hold)
str_which(hold, "month")
str_which(hold[,1], "month")
str_detect(hold[,1], "month")
hold %>%
str_detect(.[,1], "month")
?if
a
months <- str_detect(hold, "months")
months <- str_detect(hold[,1], "months")
months
str_which(.[,1], "month")
str_which(hold[,1], "month")
rm(list = ls())
# Morgan factorizes the "What is the title of the job you were thinking about while responding to this survey?" column
# As well as the "How many hours do you typically work per week in this job?" column
# An object lesson in why you should NEVER HAVE FREE TEXT ENTRY IN YOUR SURVEY
# Packages
library(tidyverse)
library(DT)
temp <- read.csv("qualtrics_pilot_data.csv", header=FALSE, na.strings="")
x <- temp[2,]
data <- temp[-c(1:3),]
colnames(data) <- x
num <- nrow(data)
## getting conditions into one large file below - 12/9/20
data$Cond1 <- rowSums(is.na(data[18:53]))
data$Cond2 <- rowSums(is.na(data[54:89]))
data$Cond3 <- rowSums(is.na(data[90:125]))
data$Cond4 <- rowSums(is.na(data[126:161]))
data$Condition[data$Cond1 < 36] <- 1
data$Condition[data$Cond2 < 36] <- 2
data$Condition[data$Cond3 < 36] <- 3
data$Condition[data$Cond4 < 36] <- 4
cond1 <- data[ which(data$Condition==1), ]
cond2 <- data[ which(data$Condition==2), ]
cond3 <- data[ which(data$Condition==3), ]
cond4 <- data[ which(data$Condition==4), ]
cond1.red <- cond1[,c(6, 18:53, 162:165, 171)]  ## using Cond1 ordering
cond2.red <- cond2[,c(6, 62:65, 70:73, 82:85, 58:61, 74:77, 86:89, 66:69, 78:81, 54:57, 162:165, 171)]
cond3.red <- cond3[,c(6, 94:97, 106:109, 118:121, 98:101, 110:113, 122:125, 102:105, 114:117, 90:93, 162:165, 171)]
cond4.red <- cond4[,c(6, 138:161, 130:137, 126:129, 162:165, 171)]        ## 171 versus 172 because testing script has extra "hours" variable
names(cond1.red) = gsub(pattern = "C*.* - ", replacement = "", x = names(cond1.red))      ## Getting rid of condition markers so rbind will work
names(cond2.red) = gsub(pattern = "C*.* - ", replacement = "", x = names(cond2.red))
names(cond3.red) = gsub(pattern = "C*.* - ", replacement = "", x = names(cond3.red))
names(cond4.red) = gsub(pattern = "C*.* - ", replacement = "", x = names(cond4.red))
together <- rbind(cond1.red, cond2.red, cond3.red, cond4.red)        ## we'll be using this object for analyses
# Hours worked
unique(together$`How many hours do you typically work per week in this job?`) # Sixty-two unique responses
gsub("[^0-9.-]", "", together$`How many hours do you typically work per week in this job?`)
together$`How many hours do you typically work per week in this job?`
together$`How many hours do you typically work per week in this job?` <- together$`How many hours do you typically work per week in this job?` %>%
gsub("[^0-9./-]", "", .) %>%  # removes all characters not included in brackets
gsub(".*/", "", .) %>% # Selects second number after "/" (e.g. 40/50 -> 50)
gsub(".*-", "", .) %>%  # Selects second number after "-" (e.g. 50-60 -> 60)
gsub("[^0-9]", "", .) %>% # Removes
str_sub(1,2) %>% # Subsets all responses to first two indices. Quick and easy way to rule out impossible hour entries
as.numeric()
# Organizational tenure
# This is going to be a doozy and will require some imperfect text analysis
together$tenure <- together[40]
hold <- head(together[40]) %>%  #%>% #test data for playing with temp
as.vector()
months <- str_detect(hold[,1], "month") #logical vector for whether row contains month
years <- str_detect(hold[,1], "year") #logical vector for whether row contains year
#and no clue how to do more than this
#Job title
unique(together$`What is the title of the job you were thinking about while responding to this survey?`) # Two-hundred and thirty-seven unique responses
together$`What is the title of the job you were thinking about while responding to this survey?`
#ONET job clusters, for use as factor levels
onet <- c('Agriculture, Food & Natural Resources', 'Archtecture & Construction', 'Arts, Audio/Video Technology & Communications',
'Business Management & Administration', 'Education & Training', 'Finance', 'Government & Public Administration',
'Health Science', 'Hospitality & Tourism', 'Human Services', 'Information Technology', 'Law, Public Safety, Corrections & Security',
'Manufacturing', 'Marketing', 'Science, Technology, Engineering & Mathematics', 'Transportation, Distribution & Logistics')
together$`What is the title of the job you were thinking about while responding to this survey?` %>%
tolower() %>%
trimws()
#creates demographic table using DT library
demo_table <- together[38:40] %>%
filter_all(any_vars(!is.na(.))) %>% #changed DT to filter out rows where all col values == NA
datatable()
# To do:
# Find quick and easy classification
# include as appendix in SIOPpapaja
# make as searchable table inside tech report via "DT" package
#     May only work inside HTML version
# include other demo data (e.g. hours worked)
# Down the line:
# management/non management
demo_table
cars
